{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NATS Connect Opts","text":"<p>This is not an official NATS project</p> <p>This is a personal project and is not endorsed by the NATS.io community. It is not guaranteed to be maintained or supported.</p> <p>This is an experimental project</p> <p>This project is a prototype and should not be used for anything serious. It is not tested, nor is it guaranteed to be correct.</p> <p>The nats.go package (Go client for NATS) provides a simple way to configure connect options using the Options pattern</p> <p>This project is an attempt to implement the same API in Python.</p> <p>Note: This may not be Pythonic and may not be the best way to do it in Python. This is just an experiment.</p>"},{"location":"#references","title":"References","text":"<ul> <li>The nats.aio.Client.connect method from nats-py.</li> </ul>"},{"location":"#how-to-install","title":"How to install","text":"pip install git+https://github.com/charbonnierg/nats-connect-opts.git"},{"location":"#example-usage","title":"Example usage","text":"examples/minimal.py<pre><code>from __future__ import annotations\n\n\nfrom nats_contrib.connect_opts import connect, options\n\n\nasync def main() -&gt; None:\n    \"\"\"A simple example of using the connect function.\"\"\"\n\n    client = await connect(\n        # Configure the servers\n        options.WithServers(\n            [\n                \"nats://localhost:4222\",\n                \"nats://localhost:4223\",\n            ]\n        ),\n        # Configure the reconnect strategy\n        options.WithAllowReconnect(\n            max_attempts=10,\n            delay_seconds=0.5,\n        ),\n        # Configure the connection name\n        options.WithConnectionName(\"my-connection\"),\n        # Configure the flusher\n        options.WithFlusher(\n            queue_size=100,\n            timeout_seconds=10,\n        ),\n    )\n\n    # Close the client\n    await client.close()\n</code></pre>"},{"location":"#other-works","title":"Other works","text":"<ul> <li> <p>NATS Micro</p> </li> <li> <p>NATS Request Many</p> </li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Guillaume Charbonnier</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Reference</li> <li>License</li> </ul>"},{"location":"reference/nats_contrib/connect_opts/","title":"Reference","text":""},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.ConnectOption","title":"<code>ConnectOption</code>","text":"<p>Base class for connect options.</p> <p>A connect option is a callable which can transform a <code>ConnectOpts</code> object.</p> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>class ConnectOption(metaclass=abc.ABCMeta):\n    \"\"\"Base class for connect options.\n\n    A connect option is a callable which can transform a\n    [`ConnectOpts`][nats_contrib.connect_opts.ConnectOpts] object.\n    \"\"\"\n\n    @abc.abstractmethod\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.ConnectOpts","title":"<code>ConnectOpts</code>  <code>dataclass</code>","text":"<p>Connect options for NATS python client.</p> <p>Parameters:</p> Name Type Description Default <code>servers</code> <code>str | list[str]</code> <p>A single server URL or a list of server URLs.</p> <code>'nats://localhost:4222'</code> <code>name</code> <code>str | None</code> <p>The connection name.</p> <code>None</code> <code>dont_randomize</code> <code>bool</code> <p>Disable randomizing the server list.</p> <code>False</code> <code>inbox_prefix</code> <code>str | bytes</code> <p>The inbox prefix to use.</p> <code>b'_INBOX'</code> <code>pedantic</code> <code>bool</code> <p>Enable pedantic mode.</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Enable verbose logging.</p> <code>False</code> <code>no_echo</code> <code>bool</code> <p>Disable echo.</p> <code>False</code> <code>connect_timeout</code> <code>float</code> <p>The connection timeout in seconds.</p> <code>2</code> <code>drain_timeout</code> <code>float</code> <p>The drain timeout in seconds.</p> <code>30</code> <code>allow_reconnect</code> <code>bool</code> <p>Enable automatic reconnection.</p> <code>True</code> <code>max_reconnect_attempts</code> <code>int</code> <p>The maximum number of reconnection attempts. <code>-1</code> for infinite.</p> <code>-1</code> <code>reconnect_time_wait</code> <code>float</code> <p>The delay between reconnection attempts in seconds.</p> <code>2</code> <code>ping_interval</code> <code>float</code> <p>The ping interval in seconds.</p> <code>60</code> <code>max_outstanding_pings</code> <code>int</code> <p>The maximum number of outstanding pings before closing the connection.</p> <code>2</code> <code>pending_size</code> <code>int</code> <p>The maximum size of the pending queue in bytes.</p> <code>1024 * 1024 * 2</code> <code>flusher_queue_size</code> <code>int</code> <p>The size of the flusher queue in number of messages.</p> <code>1024</code> <code>flush_timeout</code> <code>float | None</code> <p>The flusher timeout in seconds.</p> <code>None</code> <code>tls</code> <code>SSLContext | None</code> <p>The TLS context to use.</p> <code>None</code> <code>tls_hostname</code> <code>str | None</code> <p>The hostname to use for TLS verification.</p> <code>None</code> <code>user</code> <code>str | None</code> <p>The username to use for authentication.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>The password to use for authentication.</p> <code>None</code> <code>token</code> <code>str | None</code> <p>The token to use for authentication.</p> <code>None</code> <code>user_credentials</code> <code>str | tuple[str, str] | None</code> <p>The path to the credentials file to use for authentication.</p> <code>None</code> <code>nkeys_seed</code> <code>str | None</code> <p>The nkeys seed to use for authentication.</p> <code>None</code> <code>signature_cb</code> <code>Callable[[str], bytes] | None</code> <p>The callback function to sign the nonce during authentication.</p> <code>None</code> <code>user_jwt_cb</code> <code>Callable[[], bytearray | bytes] | None</code> <p>The callback function to return the jwt during authentication.</p> <code>None</code> <code>error_cb</code> <code>Callable[[Exception], Awaitable[None]] | None</code> <p>The callback function to call each time an error occurs.</p> <code>None</code> <code>disconnected_cb</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call each time connection is lost.</p> <code>None</code> <code>closed_cb</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call once connection is closed.</p> <code>None</code> <code>discovered_server_cb</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call each time a new server is discovered.</p> <code>None</code> <code>reconnected_cb</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call each time connection is reestablished.</p> <code>None</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass ConnectOpts:\n    \"\"\"Connect options for NATS python client.\n\n    Args:\n        servers: A single server URL or a list of server URLs.\n        name: The connection name.\n        dont_randomize: Disable randomizing the server list.\n        inbox_prefix: The inbox prefix to use.\n        pedantic: Enable pedantic mode.\n        verbose: Enable verbose logging.\n        no_echo: Disable echo.\n        connect_timeout: The connection timeout in seconds.\n        drain_timeout: The drain timeout in seconds.\n        allow_reconnect: Enable automatic reconnection.\n        max_reconnect_attempts: The maximum number of reconnection attempts. `-1` for infinite.\n        reconnect_time_wait: The delay between reconnection attempts in seconds.\n        ping_interval: The ping interval in seconds.\n        max_outstanding_pings: The maximum number of outstanding pings before closing the connection.\n        pending_size: The maximum size of the pending queue in bytes.\n        flusher_queue_size: The size of the flusher queue in number of messages.\n        flush_timeout: The flusher timeout in seconds.\n        tls: The TLS context to use.\n        tls_hostname: The hostname to use for TLS verification.\n        user: The username to use for authentication.\n        password: The password to use for authentication.\n        token: The token to use for authentication.\n        user_credentials: The path to the credentials file to use for authentication.\n        nkeys_seed: The nkeys seed to use for authentication.\n        signature_cb: The callback function to sign the nonce during authentication.\n        user_jwt_cb: The callback function to return the jwt during authentication.\n        error_cb: The callback function to call each time an error occurs.\n        disconnected_cb: The callback function to call each time connection is lost.\n        closed_cb: The callback function to call once connection is closed.\n        discovered_server_cb: The callback function to call each time a new server is discovered.\n        reconnected_cb: The callback function to call each time connection is reestablished.\n    \"\"\"\n\n    servers: str | list[str] = \"nats://localhost:4222\"\n    name: str | None = None\n    dont_randomize: bool = False\n    inbox_prefix: str | bytes = b\"_INBOX\"  # Note: No trailing \".\" in inbox prefix\n    pedantic: bool = False\n    verbose: bool = False\n    no_echo: bool = False\n    # First connect\n    connect_timeout: float = 2  # seconds\n    # Drain\n    drain_timeout: float = 30  # seconds\n    # Reconnect\n    allow_reconnect: bool = True\n    max_reconnect_attempts: int = -1  # -1 for infinite\n    reconnect_time_wait: float = 2  # seconds\n    # PingPong\n    ping_interval: float = 60  # seconds\n    max_outstanding_pings: int = 2\n    # Pending queue\n    pending_size: int = 1024 * 1024 * 2  # bytes (2MiB)\n    # Flusher\n    flusher_queue_size: int = 1024\n    flush_timeout: float | None = None\n    # tls\n    tls: ssl.SSLContext | None = None\n    tls_hostname: str | None = None\n    # Auth\n    user: str | None = None\n    password: str | None = None\n    token: str | None = None\n    user_credentials: str | tuple[str, str] | None = None\n    nkeys_seed: str | None = None\n    signature_cb: Callable[[str], bytes] | None = None\n    user_jwt_cb: Callable[[], bytearray | bytes] | None = None\n    # Connection state callbacks\n    error_cb: Callable[[Exception], Awaitable[None]] | None = None\n    disconnected_cb: Callable[[], Awaitable[None]] | None = None\n    closed_cb: Callable[[], Awaitable[None]] | None = None\n    discovered_server_cb: Callable[[], Awaitable[None]] | None = None\n    reconnected_cb: Callable[[], Awaitable[None]] | None = None\n\n    def to_dict(self) -&gt; dict[str, Any]:\n        return asdict(self)\n\n    @classmethod\n    def from_dict(cls, opts: dict[str, Any]) -&gt; ConnectOpts:\n        return cls(**opts)\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithAllowReconnect","title":"<code>WithAllowReconnect</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to enable automatic reconnection.</p> <p>The default is to allow reconnection, so this option is only needed to override a previous <code>WithDisallowReconnect</code> connect option or to configure the reconnection options.</p> <p>Parameters:</p> Name Type Description Default <code>max_attempts</code> <code>int</code> <p>The maximum number of reconnection attempts. <code>-1</code> for infinite.</p> <code>-1</code> <code>delay_seconds</code> <code>float</code> <p>The delay between reconnection attempts in seconds.</p> <code>2</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithAllowReconnect(ConnectOption):\n    \"\"\"Connect option to enable automatic reconnection.\n\n    The default is to allow reconnection, so this option is only needed\n    to override a previous [`WithDisallowReconnect`][nats_contrib.connect_opts.WithDisallowReconnect]\n    connect option or to configure the reconnection options.\n\n    Args:\n        max_attempts: The maximum number of reconnection attempts. `-1` for infinite.\n        delay_seconds: The delay between reconnection attempts in seconds.\n    \"\"\"\n\n    max_attempts: int = -1\n    delay_seconds: float = 2\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.allow_reconnect = True\n        opts.max_reconnect_attempts = self.max_attempts\n        opts.reconnect_time_wait = self.delay_seconds\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithCallbacks","title":"<code>WithCallbacks</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure all connection state callbacks.</p> <p>Parameters:</p> Name Type Description Default <code>on_error</code> <code>Callable[[Exception], Awaitable[None]] | None</code> <p>The callback function to call each time an error occurs.</p> <code>None</code> <code>on_disconnection</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call each time connection is lost.</p> <code>None</code> <code>on_connection_closed</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call once connection is closed.</p> <code>None</code> <code>on_server_discovered</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call each time a new server is discovered.</p> <code>None</code> <code>on_reconnection</code> <code>Callable[[], Awaitable[None]] | None</code> <p>The callback function to call each time connection is reestablished.</p> <code>None</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithCallbacks(ConnectOption):\n    \"\"\"Connect option to configure all connection state callbacks.\n\n    Args:\n        on_error: The callback function to call each time an error occurs.\n        on_disconnection: The callback function to call each time connection is lost.\n        on_connection_closed: The callback function to call once connection is closed.\n        on_server_discovered: The callback function to call each time a new server is discovered.\n        on_reconnection: The callback function to call each time connection is reestablished.\n    \"\"\"\n\n    on_error: Callable[[Exception], Awaitable[None]] | None = None\n    on_disconnection: Callable[[], Awaitable[None]] | None = None\n    on_connection_closed: Callable[[], Awaitable[None]] | None = None\n    on_server_discovered: Callable[[], Awaitable[None]] | None = None\n    on_reconnection: Callable[[], Awaitable[None]] | None = None\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        if self.on_error:\n            opts.error_cb = self.on_error\n        if self.on_disconnection:\n            opts.disconnected_cb = self.on_disconnection\n        if self.on_connection_closed:\n            opts.closed_cb = self.on_connection_closed\n        if self.on_server_discovered:\n            opts.discovered_server_cb = self.on_server_discovered\n        if self.on_reconnection:\n            opts.reconnected_cb = self.on_reconnection\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithConnectTimeout","title":"<code>WithConnectTimeout</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to specify the connection timeout.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>The connection timeout in seconds.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithConnectTimeout(ConnectOption):\n    \"\"\"Connect option to specify the connection timeout.\n\n    Args:\n        timeout: The connection timeout in seconds.\n    \"\"\"\n\n    timeout: float\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.connect_timeout = self.timeout\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithConnectionClosedCallback","title":"<code>WithConnectionClosedCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the connection closed callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[], Awaitable[None]]</code> <p>The callback function to call once connection is closed.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithConnectionClosedCallback(ConnectOption):\n    \"\"\"Connect option to configure the connection closed callback.\n\n    Args:\n        callback: The callback function to call once connection is closed.\n    \"\"\"\n\n    callback: Callable[[], Awaitable[None]]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.closed_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithConnectionName","title":"<code>WithConnectionName</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to specify the connection name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The connection name to use.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithConnectionName(ConnectOption):\n    \"\"\"Connect option to specify the connection name.\n\n    Args:\n        name: The connection name to use.\n    \"\"\"\n\n    name: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.name = self.name\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithCredentialsFile","title":"<code>WithCredentialsFile</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure user credentials (concatenated user jwt + nkeys seed).</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the credentials file.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithCredentialsFile(ConnectOption):\n    \"\"\"Connect option to configure user credentials (concatenated user jwt + nkeys seed).\n\n    Args:\n        filepath: The path to the credentials file.\n    \"\"\"\n\n    filepath: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        path = Path(self.filepath).expanduser().resolve()\n        if not path.is_file():\n            raise FileNotFoundError(f\"Credentials file not found: {path}\")\n        opts.user_credentials = path.as_posix()\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithDeterministicServers","title":"<code>WithDeterministicServers</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to disable randomizing the server list.</p> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>class WithDeterministicServers(ConnectOption):\n    \"\"\"Connect option to disable randomizing the server list.\"\"\"\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.dont_randomize = True\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithDisallowReconnect","title":"<code>WithDisallowReconnect</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to disable automatic reconnection.</p> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithDisallowReconnect(ConnectOption):\n    \"\"\"Connect option to disable automatic reconnection.\"\"\"\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.allow_reconnect = False\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithDisconnectedCallback","title":"<code>WithDisconnectedCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the disconnection callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[], Awaitable[None]]</code> <p>The callback function to call each time connection is lost.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithDisconnectedCallback(ConnectOption):\n    \"\"\"Connect option to configure the disconnection callback.\n\n    Args:\n        callback: The callback function to call each time connection is lost.\n    \"\"\"\n\n    callback: Callable[[], Awaitable[None]]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.disconnected_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithDrainTimeout","title":"<code>WithDrainTimeout</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to specify the drain timeout.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>The drain timeout in seconds.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithDrainTimeout(ConnectOption):\n    \"\"\"Connect option to specify the drain timeout.\n\n    Args:\n        timeout: The drain timeout in seconds.\n    \"\"\"\n\n    timeout: float\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.drain_timeout = self.timeout\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithErrorCallback","title":"<code>WithErrorCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the error callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[Exception], Awaitable[None]]</code> <p>The callback function to call each time an error occurs.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithErrorCallback(ConnectOption):\n    \"\"\"Connect option to configure the error callback.\n\n    Args:\n        callback: The callback function to call each time an error occurs.\n    \"\"\"\n\n    callback: Callable[[Exception], Awaitable[None]]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.error_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithFlusher","title":"<code>WithFlusher</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the flusher.</p> <p>Parameters:</p> Name Type Description Default <code>queue_size</code> <code>int</code> <p>The size of the flusher queue in number of messages.</p> <code>1024</code> <code>timeout_seconds</code> <code>float</code> <p>The flusher timeout in seconds.</p> <code>10</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithFlusher(ConnectOption):\n    \"\"\"Connect option to configure the flusher.\n\n    Args:\n        queue_size: The size of the flusher queue in number of messages.\n        timeout_seconds: The flusher timeout in seconds.\n    \"\"\"\n\n    queue_size: int = 1024\n    timeout_seconds: float = 10\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.flusher_queue_size = self.queue_size\n        opts.flush_timeout = self.timeout_seconds\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithInboxPrefix","title":"<code>WithInboxPrefix</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to specify the inbox prefix.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str | bytes</code> <p>The inbox prefix to use.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithInboxPrefix(ConnectOption):\n    \"\"\"Connect option to specify the inbox prefix.\n\n    Args:\n        prefix: The inbox prefix to use.\n    \"\"\"\n\n    prefix: str | bytes\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        if isinstance(self.prefix, str):\n            opts.inbox_prefix = self.prefix.encode(\"utf-8\")\n        else:\n            opts.inbox_prefix = self.prefix\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithNKeyFile","title":"<code>WithNKeyFile</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure nkeys authentication.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the nkeys seed file.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithNKeyFile(ConnectOption):\n    \"\"\"Connect option to configure nkeys authentication.\n\n    Args:\n        filepath: The path to the nkeys seed file.\n    \"\"\"\n\n    filepath: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        path = Path(self.filepath).expanduser().resolve()\n        if not path.is_file():\n            raise FileNotFoundError(f\"NKey file not found: {path}\")\n        opts.nkeys_seed = path.read_text()\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithNKeySeed","title":"<code>WithNKeySeed</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure nkeys authentication.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>str</code> <p>The nkeys seed.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithNKeySeed(ConnectOption):\n    \"\"\"Connect option to configure nkeys authentication.\n\n    Args:\n        seed: The nkeys seed.\n    \"\"\"\n\n    seed: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.nkeys_seed = self.seed\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithNKeySeedAndJwt","title":"<code>WithNKeySeedAndJwt</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure user credentials.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>str</code> <p>The nkeys seed.</p> required <code>jwt</code> <code>str</code> <p>The user jwt.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithNKeySeedAndJwt(ConnectOption):\n    \"\"\"Connect option to configure user credentials.\n\n    Args:\n        seed: The nkeys seed.\n        jwt: The user jwt.\n    \"\"\"\n\n    seed: str\n    jwt: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        if not __NKEYS_AVAILABLE__:\n            raise ModuleNotFoundError(\"nkeys module not installed\")\n        nkey = nkeys.from_seed(self.seed.encode())  # type: ignore\n        opts.signature_cb = lambda nonce: nkey.sign(nonce.encode())  # type: ignore\n        opts.user_jwt_cb = lambda: self.jwt.encode()\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithNkeyFileAndJwtFile","title":"<code>WithNkeyFileAndJwtFile</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure user credentials.</p> <p>Parameters:</p> Name Type Description Default <code>nkey_file</code> <code>str</code> <p>The path to the nkeys seed file.</p> required <code>jwt_file</code> <code>str</code> <p>The path to the user jwt file.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithNkeyFileAndJwtFile(ConnectOption):\n    \"\"\"Connect option to configure user credentials.\n\n    Args:\n        nkey_file: The path to the nkeys seed file.\n        jwt_file: The path to the user jwt file.\n    \"\"\"\n\n    nkey_file: str\n    jwt_file: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        return WithNKeySeedAndJwt(\n            Path(self.nkey_file).read_text(),\n            Path(self.jwt_file).read_text(),\n        ).__call__(opts)\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithNoEcho","title":"<code>WithNoEcho</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to disable echo.</p> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>class WithNoEcho(ConnectOption):\n    \"\"\"Connect option to disable echo.\"\"\"\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.no_echo = True\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithPassword","title":"<code>WithPassword</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure password authentication.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>The password.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithPassword(ConnectOption):\n    \"\"\"Connect option to configure password authentication.\n\n    Args:\n        password: The password.\n    \"\"\"\n\n    password: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.password = self.password\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithPedanticMode","title":"<code>WithPedanticMode</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to enable pedantic mode.</p> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>class WithPedanticMode(ConnectOption):\n    \"\"\"Connect option to enable pedantic mode.\"\"\"\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.pedantic = True\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithPendingQueue","title":"<code>WithPendingQueue</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the pending queue.</p> <p>Parameters:</p> Name Type Description Default <code>max_bytes</code> <code>int</code> <p>The maximum size of the pending queue in bytes.</p> <code>1024 * 1024 * 2</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithPendingQueue(ConnectOption):\n    \"\"\"Connect option to configure the pending queue.\n\n    Args:\n        max_bytes: The maximum size of the pending queue in bytes.\n    \"\"\"\n\n    max_bytes: int = 1024 * 1024 * 2  # bytes (2MiB)\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.pending_size = self.max_bytes\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithPingPong","title":"<code>WithPingPong</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure ping/pong.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>float</code> <p>The ping interval in seconds.</p> <code>60</code> <code>max_outstanding</code> <code>int</code> <p>The maximum number of outstanding pings before closing the connection.</p> <code>2</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithPingPong(ConnectOption):\n    \"\"\"Connect option to configure ping/pong.\n\n    Args:\n        interval: The ping interval in seconds.\n        max_outstanding: The maximum number of outstanding pings before closing the connection.\n    \"\"\"\n\n    interval: float = 60\n    max_outstanding: int = 2\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.ping_interval = self.interval\n        opts.max_outstanding_pings = self.max_outstanding\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithReconnectedCallback","title":"<code>WithReconnectedCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the reconnection callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[], Awaitable[None]]</code> <p>The callback function to call each time connection is reestablished.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithReconnectedCallback(ConnectOption):\n    \"\"\"Connect option to configure the reconnection callback.\n\n    Args:\n        callback: The callback function to call each time connection is reestablished.\n    \"\"\"\n\n    callback: Callable[[], Awaitable[None]]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.reconnected_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithServer","title":"<code>WithServer</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to specify the server URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The server URL to connect to.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithServer(ConnectOption):\n    \"\"\"Connect option to specify the server URL.\n\n    Args:\n        url: The server URL to connect to.\n    \"\"\"\n\n    url: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.servers = self.url\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithServerDiscoveredCallback","title":"<code>WithServerDiscoveredCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure the server discovered callback.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[], Awaitable[None]]</code> <p>The callback function to call each time a new server is discovered.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithServerDiscoveredCallback(ConnectOption):\n    \"\"\"Connect option to configure the server discovered callback.\n\n    Args:\n        callback: The callback function to call each time a new server is discovered.\n    \"\"\"\n\n    callback: Callable[[], Awaitable[None]]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.discovered_server_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithServers","title":"<code>WithServers</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to specify the server URLs.</p> <p>Parameters:</p> Name Type Description Default <code>urls</code> <code>list[str]</code> <p>The server URLs to connect to.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithServers(ConnectOption):\n    \"\"\"Connect option to specify the server URLs.\n\n    Args:\n        urls: The server URLs to connect to.\n    \"\"\"\n\n    urls: list[str]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.servers = self.urls\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithSignatureCallback","title":"<code>WithSignatureCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure nkeys authentication.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[str], bytes]</code> <p>The callback function to sign the nonce.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithSignatureCallback(ConnectOption):\n    \"\"\"Connect option to configure nkeys authentication.\n\n    Args:\n        callback: The callback function to sign the nonce.\n    \"\"\"\n\n    callback: Callable[[str], bytes]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.signature_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithTLSCertificate","title":"<code>WithTLSCertificate</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure client TLS certficiate.</p> <p>Parameters:</p> Name Type Description Default <code>cert_file</code> <code>str</code> <p>The path to the client certificate file.</p> required <code>key_file</code> <code>str</code> <p>The path to the client key file.</p> required <code>ca_file</code> <code>str | None</code> <p>The path to the CA certificate file.</p> <code>None</code> <code>key_file_password</code> <code>str | None</code> <p>The password for the client key file.</p> <code>None</code> <code>hostname</code> <code>str | None</code> <p>The hostname to use for TLS verification.</p> <code>None</code> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithTLSCertificate(ConnectOption):\n    \"\"\"Connect option to configure client TLS certficiate.\n\n    Args:\n        cert_file: The path to the client certificate file.\n        key_file: The path to the client key file.\n        ca_file: The path to the CA certificate file.\n        key_file_password: The password for the client key file.\n        hostname: The hostname to use for TLS verification.\n    \"\"\"\n\n    cert_file: str\n    key_file: str\n    ca_file: str | None = None\n    key_file_password: str | None = None\n    hostname: str | None = None\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        if self.ca_file:\n            context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\n            context.load_verify_locations(\n                self.ca_file,\n            )\n        else:\n            context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(\n            self.cert_file,\n            self.key_file,\n            self.key_file_password,\n        )\n        opts.tls = context\n        if self.hostname:\n            opts.tls_hostname = self.hostname\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithToken","title":"<code>WithToken</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure token authentication.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The token.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithToken(ConnectOption):\n    \"\"\"Connect option to configure token authentication.\n\n    Args:\n        token: The token.\n    \"\"\"\n\n    token: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.token = self.token\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithUserJwtCallback","title":"<code>WithUserJwtCallback</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure jwt authentication.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[], bytearray | bytes]</code> <p>The callback function to return the jwt.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithUserJwtCallback(ConnectOption):\n    \"\"\"Connect option to configure jwt authentication.\n\n    Args:\n        callback: The callback function to return the jwt.\n    \"\"\"\n\n    callback: Callable[[], bytearray | bytes]\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.user_jwt_cb = self.callback\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithUserPassword","title":"<code>WithUserPassword</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure user/password authentication.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str</code> <p>The username.</p> required <code>password</code> <code>str</code> <p>The password.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithUserPassword(ConnectOption):\n    \"\"\"Connect option to configure user/password authentication.\n\n    Args:\n        user: The username.\n        password: The password.\n    \"\"\"\n\n    user: str\n    password: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.user = self.user\n        opts.password = self.password\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithUsername","title":"<code>WithUsername</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to configure username authentication.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str</code> <p>The username.</p> required Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>@dataclass\nclass WithUsername(ConnectOption):\n    \"\"\"Connect option to configure username authentication.\n\n    Args:\n        user: The username.\n    \"\"\"\n\n    user: str\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.user = self.user\n</code></pre>"},{"location":"reference/nats_contrib/connect_opts/#nats_contrib.connect_opts.WithVerboseLogging","title":"<code>WithVerboseLogging</code>","text":"<p>             Bases: <code>ConnectOption</code></p> <p>Connect option to enable verbose logging.</p> Source code in <code>src/nats_contrib/connect_opts/options.py</code> <pre><code>class WithVerboseLogging(ConnectOption):\n    \"\"\"Connect option to enable verbose logging.\"\"\"\n\n    def __call__(self, opts: ConnectOpts) -&gt; None:\n        opts.verbose = True\n</code></pre>"}]}